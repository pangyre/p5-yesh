=head1 YESH, THE MANUAL

L<Yesh> is...

=head1 INSTALLATION

These instructions are *nix centric for now.

There are quite a few Perl packages that must be installed. If everything is working right you should be able to download the distribution for Yesh, decompress it, and install it like any Perl package.

=head2 NON-PERL DEPENDENCIES

=over 4

=item lbxml2

L<XML::LibXML>. [Download link] 321

=back

=head2 INSTALL YESH

=over 4

=item # Download

Either from CPAN where L<Yesh> may not be (yet) or from its github repo: L<http://github.com/pangyre/p5-yesh>.

=item # Decompress it

E.g.-
  tar xpfvz Yesh-#.####.tar.gz

=item # Intall it

 cd Yesh-#.####
 perl Makefile.PL
 make && make test && make install

You will be prompted to install missing dependencies. There are likely to be a lot of them.

[dicussion of dependencies and end-user role in make it all work right]

=back

You should also be able to do all the above steps in one this way-

 cpan Yesh

The cpan command is a utility of the core module L<CPAN> which will facilitates installation. It will download and attempt to install L<Yesh> and its dependencies.

To do: a Task::Yesh distribution? Without this sort of thing hosting companies may not be interested in picking up a package like this.

=head1 WEB-BASED SET UP

=begin html

<a href="../../setup">Set up</a>. Use JS to hide this?

=end html

=head1 CONFIGURATION

=head2 THEMES

=head2 PLUGINS AND EXTENSIONS

=head2 LOCAL CONFIGURATION

There are two configuration files used by Yesh while a site is running live (in production). They are F<yesh.yml> and F<yesh_local.yml>. This is a L<Catalyst> convention for setting up sites with L<Catalyst::Plugin::ConfigLoader>.

=begin html

<a href="../../txt/yesh_local.txt">Sample configuration file</a>. Use JS to hide this? These should only be exposed on local/running installations. Could be a hook in the viewer to surface them.

=end html


=over 4

=item yesh.yml

B<DO NOT> edit, remove, or otherwise molest this file. Your site will break unless you know exactly what you are doing and it is part of Yesh's revision control so your changes will break or get overwritten when you upgrade. Never fear because you can change every single setting in the file by editing-

=item yesh_local.yml

This is the local, customized configuration. It will contain information like your real database settings, themed template paths, site name, security settings, and so on.

You are welcome to edit this file but if you don't know what you're doing, you are almost guaranteed to break your site. Refer to L<YAML> and L<Catalyst::Manual>.

=back

=head2 CONFIGURATION SETTINGS

Inside your local configuration file you can set several prominent variables under the key C<site>.

 Controller::Article;
 __PACKAGE__->config( articles_per_page => 10 );

            $user->add_to_site_roles($author_role)
                if $self->{new_users_get_author_role};

TIMEZONE

 site:
  use_google_js

=over 4

=item configured

This is automatically set to the date and time of the set up if using the web based set up. B<DO NOT> change it. You will probably break your application.

=item Model::DBIC

This is the configuration for the site's main database. If you want to edit it manually, you will need to know L<DBIx::Class> and L<DBIx::Class::Schema>. You are configuring a Catalyst modelE<mdash>L<Catalyst::Model::DBIC::Schema>E<mdash>to use the site's schemaE<mdash>L<Yesh::Schema>.

=item _321

=item _321

=back

=head1 TECHNICAL DOCUMENTS

Please see the various documents for individual modules. E.g., L<Yesh::Schema>, L<Yesh::Controller::User>, L<Yesh::View::Alloy>, and so on.

=head1 YESH SPEC

=head2 Models

=head3 L<Yesh::Model::DBIC>

=head2 Controllers

This generally reflects the URI dispatch scheme. All URIs are relative to the application root. E.g., if you have Yesh configured at the top of your webserverE<ndash>

 http://expample.com/
      --> /
      --> Yesh::Controller::Root->index
 http://expample.com/admin
      --> /admin
      --> Yesh::Controller::Admin->index

Configured from exec/yesh in your webserverE<ndash>

 http://expample.com/exec/yesh/
      --> /
      --> Yesh::Controller::Root->index
 http://expample.com/exec/yesh/admin
      --> /admin
      --> Yesh::Controller::Admin->index

Private paths, like F</default>, which cannot be called only internally, not by users via browsers, are listed in [brackets].

=head3 L<Yesh::Controller::Root>

=over 4

=item /

Home/root. Shows current top level content. In an unconfigured application, this will redirect to F</setup>.

=item [/default]

Any requested URI which does not match a controllerE<mdash>e.g., F</this/is/not/valid>E<mdash>is sent to C<default> which is a 404 handler.

=back

=head3 L<Yesh::Controller::User>

=over 4

=item /user

Index page for users.

=item /user/id/*

User's home page where * is the user's id.

=item /user/id/*/atom

The feed for the user. Yesh will only support Atom feeds. B<Most> endpoints can be affixed with F</atom> to get a feed of that resource's content.

=item /user/id/*/edit

=back

=head3 L<Yesh::Controller::Session>

=over 4

=item /login

Sign-in. Can be forced to B<https> with L<configuration settings|/CONFIGURATION>. Should redirect to referrer if it's also a part of L<Yesh>.

=item /logout

Sign-out. Deletes session.

=item /password_reset

POST reqest with username and email? Sends a token URI to the user to return to the same page where-

GET request with valid tokenE<mdash>they have a configurable expiration timeE<mdash>gives a reset form. Token is invalidated upon use? No action is taken until reset form is successfully submitted.

=back

=head3 L<Yesh::Controller::Article>

Main content viewing and editing package.

=over 4

=item /a

Index to articles. Represents current and featured content.

=item /a/create

Start a new article. POST/PUT to F</a> should achieve the same result.

=item /a/atom

Syndication feed of the article index.

=item /a/id/*[/view]

Individual article view where * is the article id.

=item /a/id/*/atom

Individual article feed. Updated for content updates, new discussion, new child resources no matter how deep.

=item /a/id/*/preview

For author and editors to see a piece in normal display context before it is live. If the article is live, the preview URI redirects to the plain view.

=item /a/id/*/preview/[token]

For preview of an article regardless of user/session. The token is ephemeralE<mdash>based on the content and status of the articleE<mdash>and hashed with a site secret so it can't be guessed or cracked. The point of this is to allow external users a chance to see the content before it is live for the general visitor.

Token-based previews expire. Interface for setting this TBD.

=item /a/id/*/rev/*

Revisions. Sequential where the second * is the revision number: 1, 2, 3, et cetera.

=back

=head3 L<Yesh::Controller::Admin>

=over 4

=item _321

=back

=head3 L<Yesh::Controller::Error>

=over 4

=item _321

=back

=head3 L<Yesh::Controller::Man>

=over 4

=item _321

=back

=head3 L<Yesh::Controller::Search>

=over 4

=item _321

=back

=head3 L<Yesh::Controller::321>

=over 4

=item _321

=back

=head3 L<Yesh::Controller::321>

=over 4

=item _321

=back

=head3 L<Yesh::Controller::321>

=over 4

=item _321

asdf

=back

=head2 Views

=head3 L<Yesh::View::Alloy>

=head4 Macros

Within alloy templates you have a handful of macros available; see F<root/alloy/lib/macros.tt> for the code.

=over 4

=item article_link($article_object)

Returns an anchor tag with the title as the attribute and the text content. Optional second argument is hash reference of attributes; e.g., style, title override, rel.

asdf

=back

=head4 Variables

Generally you should only mess with the values and settings in C<site>. That said, you have access to the L<Catalyst> context which makes your templates very powerful. Too powerful really so it's up to you to not abuse it. Your custom L<Yesh> files could quickly degenerate in something that looks like bad PHP if you start using the hooks...

=over 4

=item _321

=back

=head4 Configuration

=over 4

=item _321


=back

=head1 SECURITY

If these are set in your configuration, 

 Controller::Session:
   secure_login: 1

 Controller::User:
   secure_registration: 1



=head1 TESTING

=head1 TO DO (PLEASE SUBMIT PATCHES!)

Usernames need to be case insensitive or it causes too much confusion; e.g., Ashley ne ashley in the current scheme and you could register any number of permutations its casing.

=head2 TUTORIALS

=over 4

=item Real icon/logo + iphone favicon

=item Secure certificate / https setup.

=item nginx.

=item fastcgi service script and deployment.

=item Apache + modperl.

=item How to submit translation documents.

=back

=head2 RESOURCES

=head3 YESH

=over 4

=item Bug reports and feature requests: TBD

=item Code repository L<http://github.com/pangyre/p5-yesh>

=back

=head3 CATALYST

=over 4

=item 

=item 

=back

=head1 A FEW WORDS ABOUT INTERNET EXPORER

We will not support IE 6. All of the IE family is problematic but we will support newer versions because we have to do so. IE 6 is a turd that won't flush. Just pull the handle, everyone.

=head1 SUGGESTED READING

=head1 LICENSE, COPYRIGHT, AUTHOR

See L<Yesh> and L<Yesh::Manual::ThirdParty>.

=cut
